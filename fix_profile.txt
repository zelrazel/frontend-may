STEP-BY-STEP INSTRUCTIONS TO FIX YOUR PROFILE COMPONENT
=====================================================

Follow these steps exactly to fix the profile view functionality for both your own profile and friends' profiles:

1. Edit your `Profile.js` file and add the isOwnProfile state
```javascript
// Add this around line 90, after the activeTab state declaration
const [isOwnProfile, setIsOwnProfile] = useState(true);
```

2. Replace the first useEffect (that sets currentUser) with this version to check if we're viewing someone else's profile
```javascript
useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
        // Decode the JWT token to get user ID and email
        const tokenPayload = JSON.parse(atob(token.split('.')[1]));
        setCurrentUser(tokenPayload);
        
        // Check if viewing own profile or someone else's
        if (profileEmail && tokenPayload.email !== profileEmail) {
            setIsOwnProfile(false);
        } else {
            setIsOwnProfile(true);
        }
    }
}, [profileEmail]);
```

3. Replace the fetchUserActivities function with this fixed version that handles the new API response format
```javascript
const fetchUserActivities = useCallback(async () => {
    try {
        console.log("Starting to fetch user activities");
        setActivitiesLoading(true);
        
        const token = localStorage.getItem('token');
        if (!token) {
            console.log("No token found, aborting fetchUserActivities");
            return;
        }
        
        // Get current user ID from JWT token for reaction checking
        const tokenPayload = JSON.parse(atob(token.split('.')[1]));
        const currentUserId = tokenPayload.userId;
        
        // Use query parameter to get activities for the specific user
        const targetEmail = profileEmail && !isOwnProfile ? profileEmail : undefined;
        const queryParam = targetEmail ? `?email=${targetEmail}` : '';
        
        console.log("Making API request to fetch activities");
        const response = await axios.get(`${API_URL}api/activity${queryParam}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        // Extract activities data from the response
        // The new API format returns activities inside a response.data.activities property
        const activitiesData = response.data.activities || response.data;
        
        console.log("User activities received:", activitiesData ? activitiesData.length : 0);
        
        // Check if we have valid activities data before mapping
        if (!activitiesData || !Array.isArray(activitiesData)) {
            console.error("Invalid activities data received:", response.data);
            setActivitiesLoading(false);
            return;
        }
        
        // Process activities to extract current user's reactions
        const activitiesWithUserReactions = activitiesData.map(activity => {
            // Check for user reactions
            const userReactions = [];
            
            // Safely iterate through reactions if they exist
            if (activity.reactions && Array.isArray(activity.reactions)) {
                for (const reaction of activity.reactions) {
                    if (reaction.userId && reaction.userId._id && reaction.userId._id.toString() === currentUserId) {
                        userReactions.push(reaction.reactionType);
                    }
                }
            }
            
            return {
                ...activity,
                userReactions
            };
        });
        
        setUserActivities(activitiesWithUserReactions);
        setActivitiesLoading(false);
    } catch (error) {
        console.error('Error fetching activities:', error);
        if (error.response) {
            console.error('Server response:', error.response.status, error.response.data);
        }
        setActivitiesLoading(false);
    }
}, [profileEmail, isOwnProfile]);
```

4. Update the fetchAchievements function to use the email parameter for friend profiles
```javascript
const fetchAchievements = useCallback(async () => {
    try {
        setAchievementsLoading(true);
        const token = localStorage.getItem('token');
        if (!token) return;
        
        // Use the correct profile endpoint based on whether viewing own or another's profile
        const targetEmail = profileEmail && !isOwnProfile ? profileEmail : undefined;
        const queryParam = targetEmail ? `?email=${targetEmail}` : '';
        
        // Fetch weight loss achievements with the correct user's email
        const weightResponse = await axios.get(`${API_URL}api/weight/history${queryParam}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        // Use the same email parameter approach for profile request
        const profileEndpoint = profileEmail && !isOwnProfile
            ? `${API_URL}api/profile/${profileEmail}`
            : `${API_URL}api/profile`;
            
        const profileResponse = await axios.get(profileEndpoint, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        // Get strength data with email parameter
        const strengthResponse = await axios.get(`${API_URL}api/weight/total-lifted${queryParam}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        // Get workout data with email parameter
        const workoutResponse = await axios.get(`${API_URL}api/workout/completed${queryParam}`, {
            headers: { Authorization: `Bearer ${token}` }
        });
        
        // Continue with the rest of your existing fetchAchievements logic
        // ...
    } catch (error) {
        console.error('Error fetching achievements:', error);
        setAchievementsLoading(false);
    }
}, [profileEmail, isOwnProfile]);
```

5. Update the forceRefreshAllActivities function too for the same response format issue
```javascript
// Just replace this one part of the function that processes the response.data
// ...
if (response.data) {
    // Get current user ID from JWT token
    const tokenPayload = JSON.parse(atob(token.split('.')[1]));
    const userId = tokenPayload.userId;
    
    // Process activities as usual with the new response format
    const activitiesData = response.data.activities || response.data;
    
    // Check if we have valid activities data
    if (activitiesData && Array.isArray(activitiesData)) {
        const activitiesWithUserReactions = activitiesData.map(activity => {
            const userReactions = [];
            
            if (activity.reactions && Array.isArray(activity.reactions)) {
                for (const reaction of activity.reactions) {
                    if (reaction.userId && reaction.userId._id && reaction.userId._id.toString() === userId) {
                        userReactions.push(reaction.reactionType);
                    }
                }
            }
            
            return {
                ...activity,
                userReactions
            };
        });
        
        setUserActivities(activitiesWithUserReactions);
    }
}
// ...
```

6. Find the profile title (h2 element) in the component's JSX and update it
```jsx
<h2 className="profile-picture-title">
    {isOwnProfile ? 'My Profile' : `${user?.firstName}'s Profile`}
</h2>
```

7. Find the tab buttons and update them to show different text based on profile ownership
```jsx
<button 
    className={`tab-button ${activeTab === 'profile' ? 'active' : ''}`}
    onClick={() => setActiveTab('profile')}
>
    {isOwnProfile ? 'MY PROFILE' : 'PROFILE'}
</button>
<button 
    className={`tab-button ${activeTab === 'rankings' ? 'active' : ''}`}
    onClick={() => setActiveTab('rankings')}
>
    {isOwnProfile ? 'MY RANKINGS' : 'RANKINGS'}
</button>
<button 
    className={`tab-button ${activeTab === 'achievements' ? 'active' : ''}`}
    onClick={() => setActiveTab('achievements')}
>
    {isOwnProfile ? 'MY ACHIEVEMENTS' : 'ACHIEVEMENTS'}
</button>
<button 
    className={`tab-button ${activeTab === 'activity' ? 'active' : ''}`}
    onClick={() => setActiveTab('activity')}
>
    ACTIVITY
</button>
```

8. Conditionally show edit controls for only the user's own profile
```jsx
// Update the profile picture edit button
{isOwnProfile && (
    <button 
        className={`icon-button ${isEditingPhoto ? 'close-photo-button' : 'camera-button'}`}
        onClick={() => isEditingPhoto ? cancelEdit() : setIsEditingPhoto(true)}
        title={isEditingPhoto ? "Close editing" : "Edit profile picture"}
    >
        {isEditingPhoto ? <FaTimes /> : <FaCamera />}
    </button>
)}

// Update the privacy toggle
{isOwnProfile && (
    <div className="privacy-toggle">
        <button 
            className={`toggle-button ${user?.isPrivate ? 'private' : 'public'}`}
            onClick={togglePrivacy}
        >
            {user?.isPrivate ? 'Private Profile' : 'Public Profile'}
        </button>
    </div>
)}
```

After making these changes, your profile component will correctly:
1. Detect whether you're viewing your own profile or someone else's profile
2. Fetch the correct data for the profile being viewed
3. Correctly process the API response that now returns activities in a nested property
4. Show/hide edit controls based on profile ownership
5. Display appropriate tab labels based on profile ownership

The most important fix is the fetchUserActivities function, which needs to handle the new response format where activities are in the response.data.activities property rather than directly in response.data. 